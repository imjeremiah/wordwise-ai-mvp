#!/usr/bin/env node

/*
<ai_context>
Environment Setup Script for WordWise AI
Guides users through Firebase configuration and creates necessary environment files
</ai_context>
*/

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('\nüöÄ WordWise AI Environment Setup\n');
console.log('=' .repeat(50));

async function promptUser(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function setupEnvironment() {
  try {
    console.log('\nThis script will help you set up your Firebase environment for WordWise AI.');
    console.log('\nüìã Prerequisites:');
    console.log('1. Firebase project created at https://console.firebase.google.com');
    console.log('2. Authentication enabled (Email/Password + Google)');
    console.log('3. Firestore database created');
    console.log('4. Service account key downloaded');

    const proceed = await promptUser('\nDo you have all prerequisites ready? (y/n): ');
    if (proceed.toLowerCase() !== 'y') {
      console.log('\n‚è∏Ô∏è Setup paused. Please complete the prerequisites first.');
      console.log('\nüìñ Setup Guide:');
      console.log('1. Go to https://console.firebase.google.com');
      console.log('2. Create a new project or select existing one');
      console.log('3. Enable Authentication with Email/Password and Google');
      console.log('4. Create a Firestore database');
      console.log('5. Generate a service account key from Project Settings > Service Accounts');
      rl.close();
      return;
    }

    console.log('\nüîß Firebase Configuration Setup');
    console.log('Please provide your Firebase project configuration:');

    // Collect Firebase config
    const firebaseConfig = {};
    firebaseConfig.apiKey = await promptUser('\nFirebase API Key: ');
    firebaseConfig.authDomain = await promptUser('Auth Domain (e.g., your-project.firebaseapp.com): ');
    firebaseConfig.projectId = await promptUser('Project ID: ');
    firebaseConfig.storageBucket = await promptUser('Storage Bucket (e.g., your-project.appspot.com): ');
    firebaseConfig.messagingSenderId = await promptUser('Messaging Sender ID: ');
    firebaseConfig.appId = await promptUser('App ID: ');

    // Service account setup
    console.log('\nüîë Service Account Setup');
    console.log('Please provide your service account key JSON file path or content:');
    
    const serviceAccountOption = await promptUser('\nChoose option:\n1. File path to service account JSON\n2. Paste JSON content directly\nEnter (1 or 2): ');
    
    let serviceAccountJson = '';
    if (serviceAccountOption === '1') {
      const filePath = await promptUser('Enter path to service account JSON file: ');
      try {
        const fullPath = path.resolve(filePath);
        if (fs.existsSync(fullPath)) {
          serviceAccountJson = fs.readFileSync(fullPath, 'utf8');
          console.log('‚úÖ Service account file loaded successfully');
        } else {
          throw new Error('File not found');
        }
      } catch (error) {
        console.error('‚ùå Error reading service account file:', error.message);
        rl.close();
        return;
      }
    } else if (serviceAccountOption === '2') {
      console.log('Paste your service account JSON content (press Enter twice when done):');
      let jsonContent = '';
      let emptyLines = 0;
      
      while (emptyLines < 2) {
        const line = await promptUser('');
        if (line === '') {
          emptyLines++;
        } else {
          emptyLines = 0;
          jsonContent += line + '\n';
        }
      }
      
      try {
        JSON.parse(jsonContent); // Validate JSON
        serviceAccountJson = jsonContent.trim();
        console.log('‚úÖ Service account JSON validated successfully');
      } catch (error) {
        console.error('‚ùå Invalid JSON format:', error.message);
        rl.close();
        return;
      }
    } else {
      console.log('‚ùå Invalid option selected');
      rl.close();
      return;
    }

    // Create .env.local file
    console.log('\nüìù Creating .env.local file...');
    
    const envContent = `# WordWise AI Firebase Configuration
# Generated by setup-env.js on ${new Date().toISOString()}

# Firebase Client SDK Configuration (Public)
NEXT_PUBLIC_FIREBASE_API_KEY=${firebaseConfig.apiKey}
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${firebaseConfig.authDomain}
NEXT_PUBLIC_FIREBASE_PROJECT_ID=${firebaseConfig.projectId}
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${firebaseConfig.storageBucket}
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${firebaseConfig.messagingSenderId}
NEXT_PUBLIC_FIREBASE_APP_ID=${firebaseConfig.appId}

# Firebase Admin SDK Configuration (Private)
FIREBASE_SERVICE_ACCOUNT_JSON='${serviceAccountJson.replace(/'/g, "\\'")}')

# Development Configuration
NODE_ENV=development
NEXT_PUBLIC_USE_FIREBASE_EMULATORS=false

# Stripe Configuration (Add your keys when ready)
# STRIPE_SECRET_KEY=
# STRIPE_WEBHOOK_SECRET=
# NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=

# PostHog Configuration (Add your keys when ready)
# NEXT_PUBLIC_POSTHOG_KEY=
# NEXT_PUBLIC_POSTHOG_HOST=
`;

    const envPath = path.join(process.cwd(), '.env.local');
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ .env.local file created successfully');

    // Create .env.example file
    console.log('\nüìù Creating .env.example file...');
    
    const envExampleContent = `# WordWise AI Environment Variables Template
# Copy this file to .env.local and fill in your values

# Firebase Client SDK Configuration (Public)
NEXT_PUBLIC_FIREBASE_API_KEY=your_api_key_here
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
NEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=123456789
NEXT_PUBLIC_FIREBASE_APP_ID=1:123456789:web:abcdef123456

# Firebase Admin SDK Configuration (Private)
FIREBASE_SERVICE_ACCOUNT_JSON={"type":"service_account","project_id":"your_project_id",...}

# Development Configuration
NODE_ENV=development
NEXT_PUBLIC_USE_FIREBASE_EMULATORS=false

# Stripe Configuration
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...

# PostHog Analytics Configuration
NEXT_PUBLIC_POSTHOG_KEY=phc_...
NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com
`;

    const envExamplePath = path.join(process.cwd(), '.env.example');
    fs.writeFileSync(envExamplePath, envExampleContent);
    console.log('‚úÖ .env.example file created successfully');

    // Test the configuration
    console.log('\nüß™ Testing Firebase configuration...');
    
    try {
      // Import and test Firebase config
      delete require.cache[require.resolve('../lib/firebase-config.js')];
      const { adminAuth, adminDb } = require('../lib/firebase-config.js');
      
      if (adminAuth && adminDb) {
        console.log('‚úÖ Firebase configuration test passed');
        
        // Test basic operations
        console.log('   Testing Firebase Auth...');
        const testResult = await adminAuth.listUsers(1);
        console.log('   ‚úÖ Firebase Auth connection successful');
        
        console.log('   Testing Firestore...');
        const collections = await adminDb.listCollections();
        console.log('   ‚úÖ Firestore connection successful');
        
      } else {
        console.log('‚ö†Ô∏è Firebase configuration needs verification');
      }
    } catch (configError) {
      console.log('‚ö†Ô∏è Firebase configuration test failed:', configError.message);
      console.log('   This is normal if Firebase services are not fully enabled yet.');
    }

    console.log('\nüéâ Environment Setup Complete!');
    console.log('\nüìã What was created:');
    console.log('   ‚úÖ .env.local - Your Firebase configuration');
    console.log('   ‚úÖ .env.example - Template for team members');
    
    console.log('\nüöÄ Next Steps:');
    console.log('1. Run: npm run test:auth');
    console.log('2. Run: npm run dev');
    console.log('3. Test login/signup at http://localhost:3005');
    console.log('4. Set up Stripe and PostHog when ready');
    
    console.log('\nüîí Security Notes:');
    console.log('   ‚Ä¢ .env.local is gitignored (safe)');
    console.log('   ‚Ä¢ Never commit service account keys to git');
    console.log('   ‚Ä¢ Use environment variables in production');
    
    console.log('\nüìñ Documentation:');
    console.log('   ‚Ä¢ Firebase: https://firebase.google.com/docs');
    console.log('   ‚Ä¢ WordWise AI: Check README.md for more setup info');

  } catch (error) {
    console.error('\n‚ùå Setup failed:', error.message);
    console.log('\nüîß Troubleshooting:');
    console.log('1. Check your Firebase project settings');
    console.log('2. Verify service account permissions');
    console.log('3. Ensure all prerequisites are completed');
    console.log('4. Run the setup script again');
  } finally {
    rl.close();
  }
}

// Run the setup
setupEnvironment()
  .then(() => {
    console.log('\n‚ú® Setup process completed');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Setup process failed:', error);
    process.exit(1);
  }); 